resource "aws_api_gateway_resource" "multipart" {
  rest_api_id = aws_api_gateway_rest_api.main.id
  parent_id   = data.aws_api_gateway_resource.parent.id
  path_part   = "image"
}

data "aws_api_gateway_resource" "parent" {
  rest_api_id = aws_api_gateway_rest_api.main.id
  path        = "/api/upload"
}

resource "aws_api_gateway_method" "multipart_post" {
  rest_api_id   = aws_api_gateway_rest_api.main.id
  resource_id   = aws_api_gateway_resource.multipart.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "multipart_override" {
  rest_api_id             = aws_api_gateway_rest_api.main.id
  resource_id             = aws_api_gateway_resource.multipart.id
  http_method             = aws_api_gateway_method.multipart_post.http_method
  integration_http_method = "POST"
  type                    = "HTTP_PROXY"
  uri                     = "https://your-alb-url.com/api/upload/image"

  content_handling = "CONVERT_TO_BINARY"
}



resource "aws_api_gateway_deployment" "deploy" {
  rest_api_id = aws_api_gateway_rest_api.main.id
  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_integration.multipart_override))
  }
  depends_on = [aws_api_gateway_integration.multipart_override]
}




resource "aws_api_gateway_rest_api" "main" {
  name = "my-api"
  body = file("${path.module}/openapi.yaml")
}

data "aws_api_gateway_resource" "binary" {
  rest_api_id = aws_api_gateway_rest_api.main.id
  path        = "/binary-endpoint"
}

resource "aws_api_gateway_integration" "patch_binary" {
  rest_api_id             = aws_api_gateway_rest_api.main.id
  resource_id             = data.aws_api_gateway_resource.binary.id
  http_method             = "GET"
  integration_http_method = "POST"
  type                    = "HTTP_PROXY"
  uri                     = "http://your-ecs-lb/..."

  content_handling = "CONVERT_TO_BINARY"

  depends_on = [aws_api_gateway_rest_api.main]
}

resource "aws_api_gateway_deployment" "patched_deployment" {
  rest_api_id = aws_api_gateway_rest_api.main.id
  stage_name  = "prod"

  depends_on = [aws_api_gateway_integration.patch_binary]
}


resource "null_resource" "patch_api_gateway_binary_support" {
  provisioner "local-exec" {
    command = <<EOT
      aws apigateway update-integration \
        --rest-api-id ${aws_api_gateway_rest_api.example.id} \
        --resource-id ${aws_api_gateway_resource.example.id} \
        --http-method POST \
        --patch-operations op=replace,path=/contentHandling,value=CONVERT_TO_BINARY
    EOT
  }

  depends_on = [
    aws_api_gateway_integration.example,
    aws_api_gateway_deployment.example
  ]
}



provider "aws" {
  region = "us-east-1"
}

###############################################################################
# 1) WebSocket API
###############################################################################
resource "aws_apigatewayv2_api" "ws" {
  name                       = "ecs-ws-api"
  protocol_type              = "WEBSOCKET"
  route_selection_expression = "$request.body.action"
}

###############################################################################
# 2) VPC Link (so API GW can reach your ALB in the VPC)
###############################################################################
resource "aws_apigatewayv2_vpc_link" "ecs_alb" {
  name               = "ecs-alb-vpc-link"
  subnet_ids         = var.private_subnet_ids          # e.g. ["subnet-aaa","subnet-bbb"]
  security_group_ids = [aws_security_group.alb_sg.id]   # SG that allows API GW IPs -> ALB
}

###############################################################################
# 3) HTTP_PROXY Integrations to ALB
###############################################################################
# Replace with your ALB DNS name (from aws_lb.my_alb.dns_name)
locals {
  alb_dns = aws_lb.my_alb.dns_name
}

# $connect
resource "aws_apigatewayv2_integration" "connect" {
  api_id           = aws_apigatewayv2_api.ws.id
  integration_type = "HTTP_PROXY"
  connection_type  = "VPC_LINK"
  connection_id    = aws_apigatewayv2_vpc_link.ecs_alb.id
  integration_uri  = "http://${local.alb_dns}/ws/connect"
  integration_method = "POST"
  payload_format_version = "1.0"
}

# $disconnect
resource "aws_apigatewayv2_integration" "disconnect" {
  api_id           = aws_apigatewayv2_api.ws.id
  integration_type = "HTTP_PROXY"
  connection_type  = "VPC_LINK"
  connection_id    = aws_apigatewayv2_vpc_link.ecs_alb.id
  integration_uri  = "http://${local.alb_dns}/ws/disconnect"
  integration_method = "POST"
  payload_format_version = "1.0"
}

# sendMessage
resource "aws_apigatewayv2_integration" "message" {
  api_id           = aws_apigatewayv2_api.ws.id
  integration_type = "HTTP_PROXY"
  connection_type  = "VPC_LINK"
  connection_id    = aws_apigatewayv2_vpc_link.ecs_alb.id
  integration_uri  = "http://${local.alb_dns}/ws/message"
  integration_method = "POST"
  payload_format_version = "1.0"
}

###############################################################################
# 4) WebSocket Routes
###############################################################################
resource "aws_apigatewayv2_route" "connect" {
  api_id    = aws_apigatewayv2_api.ws.id
  route_key = "$connect"
  target    = "integrations/${aws_apigatewayv2_integration.connect.id}"
}

resource "aws_apigatewayv2_route" "disconnect" {
  api_id    = aws_apigatewayv2_api.ws.id
  route_key = "$disconnect"
  target    = "integrations/${aws_apigatewayv2_integration.disconnect.id}"
}

resource "aws_apigatewayv2_route" "message" {
  api_id    = aws_apigatewayv2_api.ws.id
  route_key = "sendMessage"
  target    = "integrations/${aws_apigatewayv2_integration.message.id}"
}

###############################################################################
# 5) Deployment & Stage
###############################################################################
resource "aws_apigatewayv2_stage" "prod" {
  api_id      = aws_apigatewayv2_api.ws.id
  name        = "prod"
  auto_deploy = true
}

# No Lambda permissions needed here since weâ€™re calling ALB/ECS directly
